Index: src/main/java/com/framework/base/Base.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.framework.base;\n\nimport com.framework.listeners.AssertionLogging;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.edge.EdgeDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.safari.SafariDriver;\nimport org.testng.annotations.AfterSuite;\nimport org.testng.asserts.SoftAssert;\nimport pageObjects.PageObjects;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.Objects;\nimport java.util.Properties;\n\npublic class Base {\n\n    //The driver can be called directly from any class that extends Base\n    public static WebDriver driver;\n\n    // The below objects can be used in your code to access methods from the respective Classes from any Class that extends Base.\n// (e.g. assertions, page objects and commonly used methods)\n    public static Common common = new Common();\n    public static AssertionLogging softAssert = new AssertionLogging();\n    public static PageObjects objects = new PageObjects();\n\n    //Setting up the driver\n    public static WebDriver driver() throws IOException {\n\n        // Creates a FileInputStream by opening a connection to an actual file, the file named by the path name in the file system\n        FileInputStream fis = new FileInputStream(System.getProperty(\"user.dir\") + \"/src/main/java/com/Framework/global.properties\");\n        // Creates an empty property list with no default values.\n        Properties prop = new Properties();\n        //Reads a property list (key and element pairs) from the input stream.\n        prop.load(fis);\n\n        //Getting values for the driver property name and driver directory from Global Properties\n        String property = (String) prop.get(\"property\");\n        String driverDir = (String) prop.get(\"driverDir\");\n\n        //The below checks the Global Properties file (Webdriver properties) and initializes the driver accordingly\n        //If the Global Property is not correctly set to one of the below values, the driver will be null\n        if (Objects.equals(property, \"webdriver.chrome.driver\")) {\n            //Setting the property name and location for the chrome driver, and then creating the driver\n            System.setProperty(property, driverDir);\n            driver = new ChromeDriver();\n        } else if (Objects.equals(property, \"webdriver.gecko.driver\")) {\n            System.setProperty(property, driverDir);\n            driver = new FirefoxDriver();\n            } else if (Objects.equals(property, \"webdriver.safari.driver\")) {\n                //Safari does not require a driver so we don't set the property and location for this browser, we only initialize the driver\n                driver = new SafariDriver();\n                } else if (Objects.equals(property, \"webdriver.edge.driver\")){\n                    System.setProperty(property, driverDir);\n                    driver = new EdgeDriver();\n        }\n        //TODO separate testng.xml for webdriver versus mobile, executing multiple browsers at once?\n        //returning the driver for use in testing\n        return driver;\n    }\n\n    // We use this AfterSuite annotation from TestNG to close the browser window once all tests have completed\n    @AfterSuite\n    public void quitDriver(){\n        driver.quit();;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/framework/base/Base.java b/src/main/java/com/framework/base/Base.java
--- a/src/main/java/com/framework/base/Base.java	
+++ b/src/main/java/com/framework/base/Base.java	
@@ -7,7 +7,6 @@
 import org.openqa.selenium.firefox.FirefoxDriver;
 import org.openqa.selenium.safari.SafariDriver;
 import org.testng.annotations.AfterSuite;
-import org.testng.asserts.SoftAssert;
 import pageObjects.PageObjects;
 import java.io.FileInputStream;
 import java.io.IOException;
